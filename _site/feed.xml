<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-07T12:31:36-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Pramod Raghavendra Jayathirth</title><subtitle>Welcome to my Blog!!</subtitle><entry><title type="html">Leader Election in a kubernetes service</title><link href="http://localhost:4000/Leader-Election-in-k8s/" rel="alternate" type="text/html" title="Leader Election in a kubernetes service" /><published>2023-08-04T00:00:00-07:00</published><updated>2023-08-04T00:00:00-07:00</updated><id>http://localhost:4000/Leader-Election-in-k8s</id><content type="html" xml:base="http://localhost:4000/Leader-Election-in-k8s/">&lt;h2 id=&quot;electing-a-leader-using-controller-runtime-in-kubernetes&quot;&gt;Electing a Leader Using Controller-runtime in Kubernetes&lt;/h2&gt;

&lt;p&gt;Kubernetes is an open-source container orchestration platform that has revolutionized the way we deploy, manage, and scale containerized applications. One crucial aspect of managing applications in a Kubernetes cluster is ensuring high availability and fault tolerance. To achieve this, electing a leader among multiple instances of a controller is a common practice. In this blog post, we’ll explore how to implement leader election using the controller-runtime library in Go, making our controllers resilient and robust.&lt;/p&gt;

&lt;p&gt;The transmitting operations such as sending and receiving to a channel are blocking by default. This means that when the data is sent into a channel the control is blocked till a goroutine reads from the other end of the channel.
Similarly the read from the channel is blocked till the other end has a gorouting writing data into it&lt;/p&gt;

&lt;h2 id=&quot;why-leader-election&quot;&gt;Why Leader Election?&lt;/h2&gt;
&lt;p&gt;In a Kubernetes environment, you might have multiple instances of a controller running to manage a set of resources. These controllers might be responsible for tasks like scaling, syncing, or managing custom resources. To prevent conflicts and ensure orderly execution, only one instance should be the leader at any given time.&lt;/p&gt;

&lt;p&gt;Leader election helps achieve this by designating one instance as the leader while the others remain followers. The leader performs tasks, and in the event of a failure, another instance is automatically elected as the new leader. This mechanism ensures consistent and controlled execution of operations.&lt;/p&gt;

&lt;h2 id=&quot;using-controller-runtime-for-leader-election&quot;&gt;Using controller-runtime for Leader Election&lt;/h2&gt;
&lt;p&gt;The controller-runtime library is a powerful toolkit for building Kubernetes controllers in Go. It provides a framework for writing efficient and scalable controllers, including built-in support for leader election.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Before we begin, make sure you have the following prerequisites:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A working Kubernetes cluster.&lt;/li&gt;
  &lt;li&gt;Go programming language installed.&lt;/li&gt;
  &lt;li&gt;Basic familiarity with Kubernetes concepts and Go programming.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;implementation-steps&quot;&gt;Implementation Steps&lt;/h3&gt;

&lt;p&gt;Let’s implement leader election using controller-runtime step by step.&lt;/p&gt;

&lt;h4 id=&quot;step-1-set-up-your-controller-project&quot;&gt;Step 1: Set Up Your Controller Project&lt;/h4&gt;
&lt;p&gt;Create a new Go project and import the necessary libraries:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
    &quot;context&quot;
    &quot;flag&quot;
    &quot;os&quot;

    &quot;sigs.k8s.io/controller-runtime/pkg/manager&quot;
    // Import other necessary packages
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-2-define-the-leaderelectionconfig&quot;&gt;Step 2: Define the LeaderElectionConfig&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
    var metricsAddr string
    var enableLeaderElection bool
    flag.StringVar(&amp;amp;metricsAddr, &quot;metrics-bind-address&quot;, &quot;:8080&quot;, &quot;The address the metric endpoint binds to.&quot;)
    flag.BoolVar(&amp;amp;enableLeaderElection, &quot;enable-leader-election&quot;, false, &quot;Enable leader election for controller manager. Enabling this will ensure there is only one active controller manager.&quot;)

    flag.Parse()

    leaderElectionID := &quot;my-controller-lock&quot; // Unique ID for leader election
    // ... (initialize other components)

    // Create a new controller manager with leader election configuration
    mgr, err := manager.New(cfg, manager.Options{
        LeaderElection:     enableLeaderElection,
        LeaderElectionID:   leaderElectionID,
        MetricsBindAddress: metricsAddr,
        // ... (other options)
    })
    if err != nil {
        // Handle error
        os.Exit(1)
    }

    // ... (initialize and start controllers)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-3-start-the-manager&quot;&gt;Step 3: Start the Manager&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Start the manager
	if err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {
        // Handle error
        os.Exit(1)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-4-test-leader-election&quot;&gt;Step 4: Test Leader Election&lt;/h4&gt;
&lt;p&gt;Deploy your controller to the Kubernetes cluster and observe the leader election behavior. You should see only one instance of your controller acting as the leader.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Implementing leader election in Kubernetes controllers is crucial for ensuring reliable and fault-tolerant operation. By using the controller-runtime library, you can easily incorporate leader election functionality into your controllers, enhancing their resilience and availability.&lt;/p&gt;

&lt;p&gt;In this blog post, we’ve covered the basics of leader election using controller-runtime and provided a simple example to get you started. As you delve deeper into building Kubernetes controllers, mastering leader election will become an essential skill in maintaining the stability of your applications.&lt;/p&gt;

&lt;p&gt;Remember that leader election is just one piece of the puzzle in creating robust controllers. To fully harness the power of Kubernetes and controller-runtime, continue exploring the documentation and experimenting with more advanced features.&lt;/p&gt;

&lt;p&gt;Happy coding and happy controlling!
Image courtesy - https://www.istockphoto.com/illustrations/voting-booth&lt;/p&gt;</content><author><name>pramod</name></author><category term="cloud" /><category term="featured" /><summary type="html">Electing a Leader Using Controller-runtime in Kubernetes</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/leader-election.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/leader-election.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What are Go channels?</title><link href="http://localhost:4000/Golang-channels/" rel="alternate" type="text/html" title="What are Go channels?" /><published>2021-04-26T00:00:00-07:00</published><updated>2021-04-26T00:00:00-07:00</updated><id>http://localhost:4000/Golang-channels</id><content type="html" xml:base="http://localhost:4000/Golang-channels/">&lt;p&gt;Channels in golang are communication lines between the Goroutines. It can be biredctional as we can send and receive with the channel operator (&amp;lt;-)&lt;/p&gt;

&lt;p&gt;Channels are associated with a data type which determines what it can transport. The channel cannot transport any other type of data.&lt;/p&gt;

&lt;p&gt;A channel must be created before it is used&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ch := make(chan int)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This channel sends and receives the block with the int data type till the other end is ready&lt;/p&gt;

&lt;h2 id=&quot;sending-and-receiving&quot;&gt;Sending and Receiving&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Write into a channel
a &amp;lt;- data

Read from a channel
data := &amp;lt;- a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The transmitting operations such as sending and receiving to a channel are blocking by default. This means that when the data is sent into a channel the control is blocked till a goroutine reads from the other end of the channel.
Similarly the read from the channel is blocked till the other end has a gorouting writing data into it&lt;/p&gt;

&lt;h2 id=&quot;example-code&quot;&gt;Example code&lt;/h2&gt;
&lt;p&gt;Here is an example code which distributes a mathematical work between two go routines. We can see that the final result is calculated once both the goroutines have completed the calculation/computation&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import &quot;fmt&quot;

func add(s []int, ch chan int) {
	add := 0
	for _, v := range s {
		add += v
	}
	ch &amp;lt;- add // send add to c
}

func main() {
	p := []int{4,0,8,5,-1,1,7}

	d := make(chan int)
	go add(p[:len(p)/2], d)
	go add(p[len(p)/2:], d)
	x, y := &amp;lt;-d, &amp;lt;-d // receive from c

	fmt.Println(x, y, x+y)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Image courtesy - https://golangforall.com/en/tag/channels.html&lt;/p&gt;</content><author><name>pramod</name></author><category term="go-tutorial" /><category term="programming" /><category term="featured" /><summary type="html">Channels in golang are communication lines between the Goroutines. It can be biredctional as we can send and receive with the channel operator (&amp;lt;-)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/gochannels.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/gochannels.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What is often not discussed in Security</title><link href="http://localhost:4000/What-is-often-not-discussed-in-security/" rel="alternate" type="text/html" title="What is often not discussed in Security" /><published>2020-11-17T00:00:00-08:00</published><updated>2020-11-17T00:00:00-08:00</updated><id>http://localhost:4000/What-is-often-not-discussed-in-security</id><content type="html" xml:base="http://localhost:4000/What-is-often-not-discussed-in-security/">&lt;p&gt;While designing a system that is optimal for your application, one would probably prioritize and emphasize on the cool features, modern platforms, scalability and resiliency. While the security aspect may be considered as a second priority, it would be good to understand it at a deeper level and best pratices in industry.&lt;/p&gt;

&lt;p&gt;Often unheard but extremely important terminology in security is “Hardware Security Module”. Hardware Security Module(HSM) are often specialized hardware devices that can store, protect and manage the digital keys. They are capable of handling encryption, decryption, authentication, signature functions such as signing certificates and a lot of other cryptographic funtions.&lt;/p&gt;

&lt;p&gt;We will find that HSMs are deployed in all the corporate and Banking sectors which have multiple applications running in a data center. The application will request HSMs for keys while initializing, signing data or for certificates. The secure feature of HSM is that the keys(private keys) that are stored in it will never ever be exposed to the outside world. An application can only send a request for the data to be signed but will never get its hands on the private key. This is usually done with a parameter called “handle”. The keys are tamper proof as well. For example, if there is a visible sign of tampering, the HSM would delete that specific key rather than exposing it outside or perform any related operation. How cool is that?&lt;/p&gt;

&lt;p&gt;My experience in integrating a Hardware Security Module(TPM) into the Cloud has led me to question and investigate the security aspect everytime I work on a new project. I would probably spend an entire day in discussion when a developer says that the secrets and keys are on test/development server.&lt;/p&gt;

&lt;p&gt;Checkout my work here on &lt;a href=&quot;https://wiki.onap.org/display/DW/Integration+of+SoftHSM2+with+HW-Plugins&quot;&gt;Trusted Platform Module HSM&lt;/a&gt;&lt;/p&gt;</content><author><name>pramod</name></author><category term="Security" /><category term="featured" /><summary type="html">While designing a system that is optimal for your application, one would probably prioritize and emphasize on the cool features, modern platforms, scalability and resiliency. While the security aspect may be considered as a second priority, it would be good to understand it at a deeper level and best pratices in industry.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/security.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/security.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Why would we need a service mesh?</title><link href="http://localhost:4000/Why-Service-Mesh/" rel="alternate" type="text/html" title="Why would we need a service mesh?" /><published>2020-01-20T00:00:00-08:00</published><updated>2020-01-20T00:00:00-08:00</updated><id>http://localhost:4000/Why%20Service%20Mesh</id><content type="html" xml:base="http://localhost:4000/Why-Service-Mesh/">&lt;p&gt;Service Mesh is typically an infrastructure layer to secure, manage and connect your Microservices.&lt;/p&gt;

&lt;p&gt;Well.. Well.. Why would we even need an infra layer on top of an awesome infra layer? Like k8s..&lt;/p&gt;

&lt;p&gt;Though kubernetes offers excellent way to deploy, manage and scale you applications and microservices, it still needs to be secured. Though one can imagine the security to be handled at the API gateway and external load balancer level, the need arises when the communication takes places between the microservices inside the cluster.&lt;/p&gt;

&lt;p&gt;How would a traffic be fine grained to a specific pod of a microservice for your sticky session?
How would the mTLS be established between the micorservices running within your cluster?
Is it possible to introduce your testing code to your existing running prod instances without an outage?&lt;/p&gt;

&lt;p&gt;All the above questions and more can be solved using a Servicemesh.&lt;/p&gt;

&lt;p&gt;Kubernetes is aimed to ease the job of a application developer. Wouldn’t a developer want to offload the Security, Traffic and network responsibility to someone else?&lt;/p&gt;</content><author><name>pramod</name></author><category term="servicemesh" /><category term="kubernetes" /><category term="featured" /><summary type="html">Service Mesh is typically an infrastructure layer to secure, manage and connect your Microservices.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/servicemesh.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/servicemesh.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Welcome to my Blog</title><link href="http://localhost:4000/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to my Blog" /><published>2019-01-21T00:00:00-08:00</published><updated>2019-01-21T00:00:00-08:00</updated><id>http://localhost:4000/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/welcome-to-jekyll/">&lt;p&gt;Welcome to my Blog. I will be sharing tech posts related to Cloud computing, AI and competent programming.&lt;/p&gt;

&lt;p&gt;My interests include Yoga, Online Gaming especially Dota, travelling and Hiking. A recent geeky hobby of me is to fly Drones.&lt;/p&gt;

&lt;p&gt;I am a Software Engineer at vmware working on modern application and service mesh platforms. I am an active upstream contributor of Istio, envoy and Kubernetes. I had previously worked at Intel’s cloud Division with focus on OpenStack, OpenDaylight and OpenvSwitch. Prior to that I was a Oracle Developer and Adminsitrator at Capgemini. The core area of my interest and Passion is in Networking, Distributed Systems and recently Artificial intelligence.&lt;/p&gt;

&lt;p&gt;There is not a moment I would design a software without thinking about resiliency, network unavailability and data accessibility.
I have a master’s degree in Electrical Engineering from San Jose State University with area of interest in Software Defined Networking.&lt;/p&gt;

&lt;p&gt;Check out my &lt;a href=&quot;https://github.com/pramodrj07&quot;&gt;github-repo&lt;/a&gt; for projects that I am actively contributing to. For questions/queries ping me on any blog post&lt;/p&gt;</content><author><name>pramod</name></author><category term="tutorial" /><category term="sticky" /><summary type="html">Welcome to my Blog. I will be sharing tech posts related to Cloud computing, AI and competent programming.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/welcome.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/welcome.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Invention is a tangent of normal</title><link href="http://localhost:4000/Invention-is-the-a-tangent-of-mundane/" rel="alternate" type="text/html" title="Invention is a tangent of normal" /><published>2019-01-20T00:00:00-08:00</published><updated>2019-01-20T00:00:00-08:00</updated><id>http://localhost:4000/Invention%20is%20the%20a%20tangent%20of%20mundane</id><content type="html" xml:base="http://localhost:4000/Invention-is-the-a-tangent-of-mundane/">&lt;p&gt;I always wondered about the inefficient CPU workloads when i worked as Database administrator back in 2012. Cloud computing was starting it’s advent at then. Fast forwarding to 4 years, I joined Intel, Santa Clara in the Cloud division. I was part of a Open Source Integration team collaborating with rackspace where i realized the true potential of Cloud computing. My experience with OpenStack, a open source cloud computing platform answered the very first question on pushing the CPU limits to the best. Huge deployments with high availability made me realize how the down time of an application can be literally zero. Fascinatingly Google’s kubernetes pushed the technology to the next level by using containers as workloads versus the OpenStack’s Virtual machines. And today with the serverless architecture such as knative and AWS lamba, i look up, wait, think and imagine what could be next….&lt;/p&gt;</content><author><name>pramod</name></author><category term="tutorial" /><category term="motivation" /><category term="sticky" /><summary type="html">I always wondered about the inefficient CPU workloads when i worked as Database administrator back in 2012. Cloud computing was starting it’s advent at then. Fast forwarding to 4 years, I joined Intel, Santa Clara in the Cloud division. I was part of a Open Source Integration team collaborating with rackspace where i realized the true potential of Cloud computing. My experience with OpenStack, a open source cloud computing platform answered the very first question on pushing the CPU limits to the best. Huge deployments with high availability made me realize how the down time of an application can be literally zero. Fascinatingly Google’s kubernetes pushed the technology to the next level by using containers as workloads versus the OpenStack’s Virtual machines. And today with the serverless architecture such as knative and AWS lamba, i look up, wait, think and imagine what could be next….</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/invention.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/invention.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Software Defined Networking</title><link href="http://localhost:4000/sdn/" rel="alternate" type="text/html" title="Software Defined Networking" /><published>2019-01-19T00:00:00-08:00</published><updated>2019-01-19T00:00:00-08:00</updated><id>http://localhost:4000/sdn</id><content type="html" xml:base="http://localhost:4000/sdn/">&lt;p&gt;Software Defined Networking(SDN) architecture grew substantially as a core part of the Cloud computing. My experience on SDN has been in the early days of a popular open source project called &lt;a href=&quot;https://www.opendaylight.org/&quot;&gt;OpenDaylight&lt;/a&gt;. As compared to the conventional computer networking, the SDN is fascinating in the way that thousands of virtual swtiches can be programmed dynamically on demand with a centralized controller. The control plane is an application which will generate and apply the configuration on the virtual switches like OpenvSwitch on scale.&lt;/p&gt;

&lt;p&gt;I drove the effort to enable the &lt;a href=&quot;https://git.opendaylight.org/gerrit/c/neutron/+/60170&quot;&gt;Quality of Service&lt;/a&gt; feature in Opendaylight. This required integration between OpenStack which typically is user facing and the downstream OpenDaylight which would work behind the scene to configure underlying switches. Opendaylight has a plugin architecture so that it could support various upstream projects other than openstack and downstream projects where network vendors could develop plugins specfic to their hardware. The control plane is typically an application which would expose APIs to receive the request and interpret the data to generate the switch configuration and apply it on target switches. OpenDaylight has been a confluence of network enthusiasts from top network vendors and Cloud Providers. It was a good to learn and &lt;a href=&quot;https://git.opendaylight.org/gerrit/q/owner:pramod.raghavendra.jayathirth%2540intel.com&quot;&gt;contribute&lt;/a&gt;.&lt;/p&gt;</content><author><name>pramod</name></author><category term="SDN" /><category term="featured" /><summary type="html">Software Defined Networking(SDN) architecture grew substantially as a core part of the Cloud computing. My experience on SDN has been in the early days of a popular open source project called OpenDaylight. As compared to the conventional computer networking, the SDN is fascinating in the way that thousands of virtual swtiches can be programmed dynamically on demand with a centralized controller. The control plane is an application which will generate and apply the configuration on the virtual switches like OpenvSwitch on scale.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/sdn.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/sdn.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Let’s GO and build the microservice?</title><link href="http://localhost:4000/Build-your-microservice/" rel="alternate" type="text/html" title="Let’s GO and build the microservice?" /><published>2018-11-16T00:00:00-08:00</published><updated>2018-11-16T00:00:00-08:00</updated><id>http://localhost:4000/Build-your-microservice</id><content type="html" xml:base="http://localhost:4000/Build-your-microservice/"></content><author><name>pramod</name></author><category term="microservice" /><category term="kubernetes" /><category term="featured" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/microservice.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/microservice.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>